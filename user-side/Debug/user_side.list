
user_side.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f70  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08001110  08001110  00011110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080011dc  080011dc  000200a8  2**0
                  CONTENTS
  4 .ARM          00000000  080011dc  080011dc  000200a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080011dc  080011dc  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080011dc  080011dc  000111dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080011e0  080011e0  000111e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  080011e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000028c8  200000a8  0800128c  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002970  0800128c  00022970  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002f92  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007fa  00000000  00000000  0002306a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000110  00000000  00000000  00023868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000c8  00000000  00000000  00023978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000018ae  00000000  00000000  00023a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001b69  00000000  00000000  000252ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000872a1  00000000  00000000  00026e57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ae0f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006a4  00000000  00000000  000ae14c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a8 	.word	0x200000a8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080010f8 	.word	0x080010f8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000ac 	.word	0x200000ac
 80001dc:	080010f8 	.word	0x080010f8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <EXTI15_10_IRQHandler>:
	    NVIC_EnableIRQ(EXTI15_10_IRQn);


}
void EXTI15_10_IRQHandler(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
	// Reset the interrupt request flag.
		EXTI->PR |= 0x00002000;
 8000284:	4b05      	ldr	r3, [pc, #20]	; (800029c <EXTI15_10_IRQHandler+0x1c>)
 8000286:	695b      	ldr	r3, [r3, #20]
 8000288:	4a04      	ldr	r2, [pc, #16]	; (800029c <EXTI15_10_IRQHandler+0x1c>)
 800028a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800028e:	6153      	str	r3, [r2, #20]


}
 8000290:	bf00      	nop
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	40010400 	.word	0x40010400

080002a0 <main>:




int main(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	uartProccessorInit();
 80002a4:	f000 f936 	bl	8000514 <uartProccessorInit>
	uartComputerInit();
 80002a8:	f000 f960 	bl	800056c <uartComputerInit>
	sendCommand("AT+CIPSTART=\"TCP\",\"192.168.1.32\",80\r\n");
 80002ac:	480f      	ldr	r0, [pc, #60]	; (80002ec <main+0x4c>)
 80002ae:	f000 f853 	bl	8000358 <sendCommand>


    while(1)
    {

    	while(p_read!=p_write) // in case buffer is not empty
 80002b2:	e014      	b.n	80002de <main+0x3e>
    	{
    		                   //handle an event in the buffer

    		if(count_read<size_of_queue-1) // in case its not the last place in the array
 80002b4:	4b0e      	ldr	r3, [pc, #56]	; (80002f0 <main+0x50>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	2b08      	cmp	r3, #8
 80002ba:	dc0a      	bgt.n	80002d2 <main+0x32>
    			{
    		     	 p_read++;
 80002bc:	4b0d      	ldr	r3, [pc, #52]	; (80002f4 <main+0x54>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	3304      	adds	r3, #4
 80002c2:	4a0c      	ldr	r2, [pc, #48]	; (80002f4 <main+0x54>)
 80002c4:	6013      	str	r3, [r2, #0]
    		     	 count_read++;
 80002c6:	4b0a      	ldr	r3, [pc, #40]	; (80002f0 <main+0x50>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	3301      	adds	r3, #1
 80002cc:	4a08      	ldr	r2, [pc, #32]	; (80002f0 <main+0x50>)
 80002ce:	6013      	str	r3, [r2, #0]
 80002d0:	e005      	b.n	80002de <main+0x3e>
    			}
    		else {                         // in case its the last place in the array
        	     	 p_read=event_queue;
 80002d2:	4b08      	ldr	r3, [pc, #32]	; (80002f4 <main+0x54>)
 80002d4:	4a08      	ldr	r2, [pc, #32]	; (80002f8 <main+0x58>)
 80002d6:	601a      	str	r2, [r3, #0]
        	     	 count_read=0;
 80002d8:	4b05      	ldr	r3, [pc, #20]	; (80002f0 <main+0x50>)
 80002da:	2200      	movs	r2, #0
 80002dc:	601a      	str	r2, [r3, #0]
    	while(p_read!=p_write) // in case buffer is not empty
 80002de:	4b05      	ldr	r3, [pc, #20]	; (80002f4 <main+0x54>)
 80002e0:	681a      	ldr	r2, [r3, #0]
 80002e2:	4b06      	ldr	r3, [pc, #24]	; (80002fc <main+0x5c>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	429a      	cmp	r2, r3
 80002e8:	d1e4      	bne.n	80002b4 <main+0x14>
 80002ea:	e7f8      	b.n	80002de <main+0x3e>
 80002ec:	08001110 	.word	0x08001110
 80002f0:	200000c4 	.word	0x200000c4
 80002f4:	20000000 	.word	0x20000000
 80002f8:	200028cc 	.word	0x200028cc
 80002fc:	20000004 	.word	0x20000004

08000300 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0
 8000306:	4603      	mov	r3, r0
 8000308:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800030a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800030e:	2b00      	cmp	r3, #0
 8000310:	db0b      	blt.n	800032a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000312:	79fb      	ldrb	r3, [r7, #7]
 8000314:	f003 021f 	and.w	r2, r3, #31
 8000318:	4907      	ldr	r1, [pc, #28]	; (8000338 <__NVIC_EnableIRQ+0x38>)
 800031a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800031e:	095b      	lsrs	r3, r3, #5
 8000320:	2001      	movs	r0, #1
 8000322:	fa00 f202 	lsl.w	r2, r0, r2
 8000326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800032a:	bf00      	nop
 800032c:	370c      	adds	r7, #12
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	e000e100 	.word	0xe000e100

0800033c <printToComputer>:
static int flag_name=0;
static int flag_password=0;


void printToComputer(char *printer)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
	print("%s\n",printer);
 8000344:	6879      	ldr	r1, [r7, #4]
 8000346:	4803      	ldr	r0, [pc, #12]	; (8000354 <printToComputer+0x18>)
 8000348:	f000 f9de 	bl	8000708 <print>
}
 800034c:	bf00      	nop
 800034e:	3708      	adds	r7, #8
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}
 8000354:	08001138 	.word	0x08001138

08000358 <sendCommand>:



void sendCommand(char *send_arr)  // send command to the modem
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
	int count_arr=0;
 8000360:	2300      	movs	r3, #0
 8000362:	60fb      	str	r3, [r7, #12]
	while(send_arr[count_arr]!='\0')
 8000364:	e010      	b.n	8000388 <sendCommand+0x30>
		{
			USART1->TDR=send_arr[count_arr];
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	687a      	ldr	r2, [r7, #4]
 800036a:	4413      	add	r3, r2
 800036c:	781a      	ldrb	r2, [r3, #0]
 800036e:	4b0c      	ldr	r3, [pc, #48]	; (80003a0 <sendCommand+0x48>)
 8000370:	b292      	uxth	r2, r2
 8000372:	851a      	strh	r2, [r3, #40]	; 0x28
			while(!(USART1->ISR & 0x00000080));
 8000374:	bf00      	nop
 8000376:	4b0a      	ldr	r3, [pc, #40]	; (80003a0 <sendCommand+0x48>)
 8000378:	69db      	ldr	r3, [r3, #28]
 800037a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800037e:	2b00      	cmp	r3, #0
 8000380:	d0f9      	beq.n	8000376 <sendCommand+0x1e>
			count_arr++;
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	3301      	adds	r3, #1
 8000386:	60fb      	str	r3, [r7, #12]
	while(send_arr[count_arr]!='\0')
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	687a      	ldr	r2, [r7, #4]
 800038c:	4413      	add	r3, r2
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	2b00      	cmp	r3, #0
 8000392:	d1e8      	bne.n	8000366 <sendCommand+0xe>
		}
	printResponse();
 8000394:	f000 f844 	bl	8000420 <printResponse>

}
 8000398:	bf00      	nop
 800039a:	3710      	adds	r7, #16
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	40013800 	.word	0x40013800

080003a4 <wifiDetail>:

void wifiDetail() // input the wifi details
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
	if(flag_name==0&&flag_password==0)
 80003a8:	4b17      	ldr	r3, [pc, #92]	; (8000408 <wifiDetail+0x64>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d111      	bne.n	80003d4 <wifiDetail+0x30>
 80003b0:	4b16      	ldr	r3, [pc, #88]	; (800040c <wifiDetail+0x68>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d10d      	bne.n	80003d4 <wifiDetail+0x30>
	{
		name_of_wifi[0]='"';
 80003b8:	4b15      	ldr	r3, [pc, #84]	; (8000410 <wifiDetail+0x6c>)
 80003ba:	2222      	movs	r2, #34	; 0x22
 80003bc:	701a      	strb	r2, [r3, #0]
		password_of_wifi[0]='"';
 80003be:	4b15      	ldr	r3, [pc, #84]	; (8000414 <wifiDetail+0x70>)
 80003c0:	2222      	movs	r2, #34	; 0x22
 80003c2:	701a      	strb	r2, [r3, #0]
		print("please type the name of the wifi now\n");
 80003c4:	4814      	ldr	r0, [pc, #80]	; (8000418 <wifiDetail+0x74>)
 80003c6:	f000 f99f 	bl	8000708 <print>
		while(flag_name!=1);
 80003ca:	bf00      	nop
 80003cc:	4b0e      	ldr	r3, [pc, #56]	; (8000408 <wifiDetail+0x64>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	2b01      	cmp	r3, #1
 80003d2:	d1fb      	bne.n	80003cc <wifiDetail+0x28>
	}
	 if(flag_name==1&&flag_password==0)
 80003d4:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <wifiDetail+0x64>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	2b01      	cmp	r3, #1
 80003da:	d112      	bne.n	8000402 <wifiDetail+0x5e>
 80003dc:	4b0b      	ldr	r3, [pc, #44]	; (800040c <wifiDetail+0x68>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d10e      	bne.n	8000402 <wifiDetail+0x5e>
	{
		print("please type the password of the wifi\n");
 80003e4:	480d      	ldr	r0, [pc, #52]	; (800041c <wifiDetail+0x78>)
 80003e6:	f000 f98f 	bl	8000708 <print>
		while(flag_password!=1);
 80003ea:	bf00      	nop
 80003ec:	4b07      	ldr	r3, [pc, #28]	; (800040c <wifiDetail+0x68>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	2b01      	cmp	r3, #1
 80003f2:	d1fb      	bne.n	80003ec <wifiDetail+0x48>
		strcat(name_of_wifi,password_of_wifi);
 80003f4:	4907      	ldr	r1, [pc, #28]	; (8000414 <wifiDetail+0x70>)
 80003f6:	4806      	ldr	r0, [pc, #24]	; (8000410 <wifiDetail+0x6c>)
 80003f8:	f000 fa32 	bl	8000860 <strcat>
		wifiConnect(name_of_wifi);
 80003fc:	4804      	ldr	r0, [pc, #16]	; (8000410 <wifiDetail+0x6c>)
 80003fe:	f000 f9bd 	bl	800077c <wifiConnect>
	}




}
 8000402:	bf00      	nop
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	200028b4 	.word	0x200028b4
 800040c:	200028b8 	.word	0x200028b8
 8000410:	20002858 	.word	0x20002858
 8000414:	20002880 	.word	0x20002880
 8000418:	0800113c 	.word	0x0800113c
 800041c:	08001164 	.word	0x08001164

08000420 <printResponse>:

void printResponse()
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0

	while(ret==NULL)                             // check if there is '\n' it means that command over
 8000424:	e007      	b.n	8000436 <printResponse+0x16>
		{
			ret=memchr(wifi_buffer,'\n',200);
 8000426:	22c8      	movs	r2, #200	; 0xc8
 8000428:	210a      	movs	r1, #10
 800042a:	4834      	ldr	r0, [pc, #208]	; (80004fc <printResponse+0xdc>)
 800042c:	f7ff fed8 	bl	80001e0 <memchr>
 8000430:	4603      	mov	r3, r0
 8000432:	4a33      	ldr	r2, [pc, #204]	; (8000500 <printResponse+0xe0>)
 8000434:	6013      	str	r3, [r2, #0]
	while(ret==NULL)                             // check if there is '\n' it means that command over
 8000436:	4b32      	ldr	r3, [pc, #200]	; (8000500 <printResponse+0xe0>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	2b00      	cmp	r3, #0
 800043c:	d0f3      	beq.n	8000426 <printResponse+0x6>
		}
	while(wifi_buffer[count_wifi_buftwo]!='\r'&&wifi_buffer[count_wifi_buftwo+1]!='\n')     // print the command
 800043e:	e02a      	b.n	8000496 <printResponse+0x76>
		{
			print("%c",wifi_buffer[count_wifi_buftwo]);
 8000440:	4b30      	ldr	r3, [pc, #192]	; (8000504 <printResponse+0xe4>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	4a2d      	ldr	r2, [pc, #180]	; (80004fc <printResponse+0xdc>)
 8000446:	5cd3      	ldrb	r3, [r2, r3]
 8000448:	4619      	mov	r1, r3
 800044a:	482f      	ldr	r0, [pc, #188]	; (8000508 <printResponse+0xe8>)
 800044c:	f000 f95c 	bl	8000708 <print>
			if(wifi_buffer[count_wifi_buftwo-1]=='O'&&wifi_buffer[count_wifi_buftwo]=='K')
 8000450:	4b2c      	ldr	r3, [pc, #176]	; (8000504 <printResponse+0xe4>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	3b01      	subs	r3, #1
 8000456:	4a29      	ldr	r2, [pc, #164]	; (80004fc <printResponse+0xdc>)
 8000458:	5cd3      	ldrb	r3, [r2, r3]
 800045a:	2b4f      	cmp	r3, #79	; 0x4f
 800045c:	d10b      	bne.n	8000476 <printResponse+0x56>
 800045e:	4b29      	ldr	r3, [pc, #164]	; (8000504 <printResponse+0xe4>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4a26      	ldr	r2, [pc, #152]	; (80004fc <printResponse+0xdc>)
 8000464:	5cd3      	ldrb	r3, [r2, r3]
 8000466:	2b4b      	cmp	r3, #75	; 0x4b
 8000468:	d105      	bne.n	8000476 <printResponse+0x56>
			{
				print("\n");
 800046a:	4828      	ldr	r0, [pc, #160]	; (800050c <printResponse+0xec>)
 800046c:	f000 f94c 	bl	8000708 <print>
				flag_ok=1;
 8000470:	4b27      	ldr	r3, [pc, #156]	; (8000510 <printResponse+0xf0>)
 8000472:	2201      	movs	r2, #1
 8000474:	601a      	str	r2, [r3, #0]
			}

			if(wifi_buffer[count_wifi_buftwo]=='\n')
 8000476:	4b23      	ldr	r3, [pc, #140]	; (8000504 <printResponse+0xe4>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4a20      	ldr	r2, [pc, #128]	; (80004fc <printResponse+0xdc>)
 800047c:	5cd3      	ldrb	r3, [r2, r3]
 800047e:	2b0a      	cmp	r3, #10
 8000480:	d104      	bne.n	800048c <printResponse+0x6c>
			{
				wifi_buffer[count_wifi_buftwo]=' ';
 8000482:	4b20      	ldr	r3, [pc, #128]	; (8000504 <printResponse+0xe4>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4a1d      	ldr	r2, [pc, #116]	; (80004fc <printResponse+0xdc>)
 8000488:	2120      	movs	r1, #32
 800048a:	54d1      	strb	r1, [r2, r3]
			}
			count_wifi_buftwo++;
 800048c:	4b1d      	ldr	r3, [pc, #116]	; (8000504 <printResponse+0xe4>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	3301      	adds	r3, #1
 8000492:	4a1c      	ldr	r2, [pc, #112]	; (8000504 <printResponse+0xe4>)
 8000494:	6013      	str	r3, [r2, #0]
	while(wifi_buffer[count_wifi_buftwo]!='\r'&&wifi_buffer[count_wifi_buftwo+1]!='\n')     // print the command
 8000496:	4b1b      	ldr	r3, [pc, #108]	; (8000504 <printResponse+0xe4>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4a18      	ldr	r2, [pc, #96]	; (80004fc <printResponse+0xdc>)
 800049c:	5cd3      	ldrb	r3, [r2, r3]
 800049e:	2b0d      	cmp	r3, #13
 80004a0:	d006      	beq.n	80004b0 <printResponse+0x90>
 80004a2:	4b18      	ldr	r3, [pc, #96]	; (8000504 <printResponse+0xe4>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	3301      	adds	r3, #1
 80004a8:	4a14      	ldr	r2, [pc, #80]	; (80004fc <printResponse+0xdc>)
 80004aa:	5cd3      	ldrb	r3, [r2, r3]
 80004ac:	2b0a      	cmp	r3, #10
 80004ae:	d1c7      	bne.n	8000440 <printResponse+0x20>

		}
	wifi_buffer[count_wifi_buftwo+1]=' ';
 80004b0:	4b14      	ldr	r3, [pc, #80]	; (8000504 <printResponse+0xe4>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	3301      	adds	r3, #1
 80004b6:	4a11      	ldr	r2, [pc, #68]	; (80004fc <printResponse+0xdc>)
 80004b8:	2120      	movs	r1, #32
 80004ba:	54d1      	strb	r1, [r2, r3]

	if(flag_ok!=1)
 80004bc:	4b14      	ldr	r3, [pc, #80]	; (8000510 <printResponse+0xf0>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	2b01      	cmp	r3, #1
 80004c2:	d00a      	beq.n	80004da <printResponse+0xba>
	{
		count_wifi_buftwo++;
 80004c4:	4b0f      	ldr	r3, [pc, #60]	; (8000504 <printResponse+0xe4>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	3301      	adds	r3, #1
 80004ca:	4a0e      	ldr	r2, [pc, #56]	; (8000504 <printResponse+0xe4>)
 80004cc:	6013      	str	r3, [r2, #0]
		ret=NULL;
 80004ce:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <printResponse+0xe0>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
		printResponse();
 80004d4:	f7ff ffa4 	bl	8000420 <printResponse>
	}




}
 80004d8:	e00e      	b.n	80004f8 <printResponse+0xd8>
	else if(flag_ok==1)
 80004da:	4b0d      	ldr	r3, [pc, #52]	; (8000510 <printResponse+0xf0>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	2b01      	cmp	r3, #1
 80004e0:	d10a      	bne.n	80004f8 <printResponse+0xd8>
		flag_ok=0;
 80004e2:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <printResponse+0xf0>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
		count_wifi_buftwo++;
 80004e8:	4b06      	ldr	r3, [pc, #24]	; (8000504 <printResponse+0xe4>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	3301      	adds	r3, #1
 80004ee:	4a05      	ldr	r2, [pc, #20]	; (8000504 <printResponse+0xe4>)
 80004f0:	6013      	str	r3, [r2, #0]
		ret=NULL;
 80004f2:	4b03      	ldr	r3, [pc, #12]	; (8000500 <printResponse+0xe0>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
}
 80004f8:	bf00      	nop
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	20000148 	.word	0x20000148
 8000500:	2000295c 	.word	0x2000295c
 8000504:	200028ac 	.word	0x200028ac
 8000508:	0800118c 	.word	0x0800118c
 800050c:	08001190 	.word	0x08001190
 8000510:	200028b0 	.word	0x200028b0

08000514 <uartProccessorInit>:



void uartProccessorInit()
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0

	// Enable GPIOC clock (p. 148 in the datasheet).
	        RCC->AHBENR |= 0x00080000;
 8000518:	4b11      	ldr	r3, [pc, #68]	; (8000560 <uartProccessorInit+0x4c>)
 800051a:	695b      	ldr	r3, [r3, #20]
 800051c:	4a10      	ldr	r2, [pc, #64]	; (8000560 <uartProccessorInit+0x4c>)
 800051e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000522:	6153      	str	r3, [r2, #20]
	    // Enable USART1 clock.
	        RCC->APB2ENR |= 0x00004000;
 8000524:	4b0e      	ldr	r3, [pc, #56]	; (8000560 <uartProccessorInit+0x4c>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	4a0d      	ldr	r2, [pc, #52]	; (8000560 <uartProccessorInit+0x4c>)
 800052a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800052e:	6193      	str	r3, [r2, #24]
	    // Configure GPIOC pins 4 and 5 as alternate function 7, which is USART1.
	        GPIOC->MODER |= 0x00000A00;
 8000530:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <uartProccessorInit+0x50>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a0b      	ldr	r2, [pc, #44]	; (8000564 <uartProccessorInit+0x50>)
 8000536:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 800053a:	6013      	str	r3, [r2, #0]
	        GPIOC->AFR[0]|= 0x00770000;
 800053c:	4b09      	ldr	r3, [pc, #36]	; (8000564 <uartProccessorInit+0x50>)
 800053e:	6a1b      	ldr	r3, [r3, #32]
 8000540:	4a08      	ldr	r2, [pc, #32]	; (8000564 <uartProccessorInit+0x50>)
 8000542:	f443 03ee 	orr.w	r3, r3, #7798784	; 0x770000
 8000546:	6213      	str	r3, [r2, #32]
	        USART1->BRR = 69;  // 115200 wifi baud rate
 8000548:	4b07      	ldr	r3, [pc, #28]	; (8000568 <uartProccessorInit+0x54>)
 800054a:	2245      	movs	r2, #69	; 0x45
 800054c:	60da      	str	r2, [r3, #12]
	        // Enable USART1 and its TX functionality.
	        // Enable USART1 and its RX and TX functionality.
	        // Also enable the RX interrupt.
	        USART1->CR1 = 0x0000002D;
 800054e:	4b06      	ldr	r3, [pc, #24]	; (8000568 <uartProccessorInit+0x54>)
 8000550:	222d      	movs	r2, #45	; 0x2d
 8000552:	601a      	str	r2, [r3, #0]
	        NVIC_EnableIRQ(USART1_IRQn);
 8000554:	2025      	movs	r0, #37	; 0x25
 8000556:	f7ff fed3 	bl	8000300 <__NVIC_EnableIRQ>


}
 800055a:	bf00      	nop
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40021000 	.word	0x40021000
 8000564:	48000800 	.word	0x48000800
 8000568:	40013800 	.word	0x40013800

0800056c <uartComputerInit>:

void uartComputerInit()
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
	// Enable GPIOA clock (p. 148 in the datasheet).
	    RCC->AHBENR |= 0x00020000;
 8000570:	4b16      	ldr	r3, [pc, #88]	; (80005cc <uartComputerInit+0x60>)
 8000572:	695b      	ldr	r3, [r3, #20]
 8000574:	4a15      	ldr	r2, [pc, #84]	; (80005cc <uartComputerInit+0x60>)
 8000576:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800057a:	6153      	str	r3, [r2, #20]
	    // Enable USART2 clock.
	    RCC->APB1ENR |= 0x00020000;
 800057c:	4b13      	ldr	r3, [pc, #76]	; (80005cc <uartComputerInit+0x60>)
 800057e:	69db      	ldr	r3, [r3, #28]
 8000580:	4a12      	ldr	r2, [pc, #72]	; (80005cc <uartComputerInit+0x60>)
 8000582:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000586:	61d3      	str	r3, [r2, #28]
	    // Configure GPIOA pins 2 and 3 as alternate function 7, which is USART2.
	    GPIOA->MODER |= 0x000000A0;
 8000588:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000592:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000596:	6013      	str	r3, [r2, #0]
	    GPIOA->AFR[0] |= 0x00007700;
 8000598:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800059c:	6a1b      	ldr	r3, [r3, #32]
 800059e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005a2:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80005a6:	6213      	str	r3, [r2, #32]
	    USART2->BRR = 833;   // 9600 baud rate
 80005a8:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <uartComputerInit+0x64>)
 80005aa:	f240 3241 	movw	r2, #833	; 0x341
 80005ae:	60da      	str	r2, [r3, #12]
	    // Enable USART2 and its TX functionality.
	    // Enable USART2 and its RX and TX functionality.
	    // Also enable the RX interrupt.
	    USART2->CR1 = 0x0000002D;
 80005b0:	4b07      	ldr	r3, [pc, #28]	; (80005d0 <uartComputerInit+0x64>)
 80005b2:	222d      	movs	r2, #45	; 0x2d
 80005b4:	601a      	str	r2, [r3, #0]
	    NVIC_EnableIRQ(USART2_IRQn);
 80005b6:	2026      	movs	r0, #38	; 0x26
 80005b8:	f7ff fea2 	bl	8000300 <__NVIC_EnableIRQ>
	    printToComputer("user-side program");
 80005bc:	4805      	ldr	r0, [pc, #20]	; (80005d4 <uartComputerInit+0x68>)
 80005be:	f7ff febd 	bl	800033c <printToComputer>
	    wifiDetail();
 80005c2:	f7ff feef 	bl	80003a4 <wifiDetail>
}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40021000 	.word	0x40021000
 80005d0:	40004400 	.word	0x40004400
 80005d4:	08001194 	.word	0x08001194

080005d8 <USART2_EXTI26_IRQHandler>:


void USART2_EXTI26_IRQHandler(void)  // interrupt uart for computer
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
		temp_c=USART2->RDR;
 80005dc:	4b36      	ldr	r3, [pc, #216]	; (80006b8 <USART2_EXTI26_IRQHandler+0xe0>)
 80005de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80005e0:	b29b      	uxth	r3, r3
 80005e2:	b2da      	uxtb	r2, r3
 80005e4:	4b35      	ldr	r3, [pc, #212]	; (80006bc <USART2_EXTI26_IRQHandler+0xe4>)
 80005e6:	701a      	strb	r2, [r3, #0]
		if(temp_c=='\n'&&flag_name==0)
 80005e8:	4b34      	ldr	r3, [pc, #208]	; (80006bc <USART2_EXTI26_IRQHandler+0xe4>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	2b0a      	cmp	r3, #10
 80005ee:	d115      	bne.n	800061c <USART2_EXTI26_IRQHandler+0x44>
 80005f0:	4b33      	ldr	r3, [pc, #204]	; (80006c0 <USART2_EXTI26_IRQHandler+0xe8>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d111      	bne.n	800061c <USART2_EXTI26_IRQHandler+0x44>
		{
			flag_name=1;
 80005f8:	4b31      	ldr	r3, [pc, #196]	; (80006c0 <USART2_EXTI26_IRQHandler+0xe8>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	601a      	str	r2, [r3, #0]
			name_of_wifi[counter]='"';         // demands of the wifi modem
 80005fe:	4b31      	ldr	r3, [pc, #196]	; (80006c4 <USART2_EXTI26_IRQHandler+0xec>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a31      	ldr	r2, [pc, #196]	; (80006c8 <USART2_EXTI26_IRQHandler+0xf0>)
 8000604:	2122      	movs	r1, #34	; 0x22
 8000606:	54d1      	strb	r1, [r2, r3]
			name_of_wifi[counter+1]=',';       // demands of the wifi modem
 8000608:	4b2e      	ldr	r3, [pc, #184]	; (80006c4 <USART2_EXTI26_IRQHandler+0xec>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	3301      	adds	r3, #1
 800060e:	4a2e      	ldr	r2, [pc, #184]	; (80006c8 <USART2_EXTI26_IRQHandler+0xf0>)
 8000610:	212c      	movs	r1, #44	; 0x2c
 8000612:	54d1      	strb	r1, [r2, r3]
			counter=1;
 8000614:	4b2b      	ldr	r3, [pc, #172]	; (80006c4 <USART2_EXTI26_IRQHandler+0xec>)
 8000616:	2201      	movs	r2, #1
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	e047      	b.n	80006ac <USART2_EXTI26_IRQHandler+0xd4>
		}
		else if(temp_c!='\n'&&flag_name==0)
 800061c:	4b27      	ldr	r3, [pc, #156]	; (80006bc <USART2_EXTI26_IRQHandler+0xe4>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b0a      	cmp	r3, #10
 8000622:	d00f      	beq.n	8000644 <USART2_EXTI26_IRQHandler+0x6c>
 8000624:	4b26      	ldr	r3, [pc, #152]	; (80006c0 <USART2_EXTI26_IRQHandler+0xe8>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d10b      	bne.n	8000644 <USART2_EXTI26_IRQHandler+0x6c>
		{
			name_of_wifi[counter]=temp_c;
 800062c:	4b25      	ldr	r3, [pc, #148]	; (80006c4 <USART2_EXTI26_IRQHandler+0xec>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a22      	ldr	r2, [pc, #136]	; (80006bc <USART2_EXTI26_IRQHandler+0xe4>)
 8000632:	7811      	ldrb	r1, [r2, #0]
 8000634:	4a24      	ldr	r2, [pc, #144]	; (80006c8 <USART2_EXTI26_IRQHandler+0xf0>)
 8000636:	54d1      	strb	r1, [r2, r3]
			counter++;
 8000638:	4b22      	ldr	r3, [pc, #136]	; (80006c4 <USART2_EXTI26_IRQHandler+0xec>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	3301      	adds	r3, #1
 800063e:	4a21      	ldr	r2, [pc, #132]	; (80006c4 <USART2_EXTI26_IRQHandler+0xec>)
 8000640:	6013      	str	r3, [r2, #0]
 8000642:	e033      	b.n	80006ac <USART2_EXTI26_IRQHandler+0xd4>
		}
		else if(temp_c!='\n'&&flag_name==1) // that means that we need to configure the password
 8000644:	4b1d      	ldr	r3, [pc, #116]	; (80006bc <USART2_EXTI26_IRQHandler+0xe4>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b0a      	cmp	r3, #10
 800064a:	d00f      	beq.n	800066c <USART2_EXTI26_IRQHandler+0x94>
 800064c:	4b1c      	ldr	r3, [pc, #112]	; (80006c0 <USART2_EXTI26_IRQHandler+0xe8>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b01      	cmp	r3, #1
 8000652:	d10b      	bne.n	800066c <USART2_EXTI26_IRQHandler+0x94>
		{
			password_of_wifi[counter]=temp_c;
 8000654:	4b1b      	ldr	r3, [pc, #108]	; (80006c4 <USART2_EXTI26_IRQHandler+0xec>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a18      	ldr	r2, [pc, #96]	; (80006bc <USART2_EXTI26_IRQHandler+0xe4>)
 800065a:	7811      	ldrb	r1, [r2, #0]
 800065c:	4a1b      	ldr	r2, [pc, #108]	; (80006cc <USART2_EXTI26_IRQHandler+0xf4>)
 800065e:	54d1      	strb	r1, [r2, r3]
			counter++;
 8000660:	4b18      	ldr	r3, [pc, #96]	; (80006c4 <USART2_EXTI26_IRQHandler+0xec>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	3301      	adds	r3, #1
 8000666:	4a17      	ldr	r2, [pc, #92]	; (80006c4 <USART2_EXTI26_IRQHandler+0xec>)
 8000668:	6013      	str	r3, [r2, #0]
 800066a:	e01f      	b.n	80006ac <USART2_EXTI26_IRQHandler+0xd4>
		}
		else if(temp_c=='\n'&&flag_name==1)  // that means we finish configure password
 800066c:	4b13      	ldr	r3, [pc, #76]	; (80006bc <USART2_EXTI26_IRQHandler+0xe4>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b0a      	cmp	r3, #10
 8000672:	d11b      	bne.n	80006ac <USART2_EXTI26_IRQHandler+0xd4>
 8000674:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <USART2_EXTI26_IRQHandler+0xe8>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2b01      	cmp	r3, #1
 800067a:	d117      	bne.n	80006ac <USART2_EXTI26_IRQHandler+0xd4>
		{
			flag_password=1;
 800067c:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <USART2_EXTI26_IRQHandler+0xf8>)
 800067e:	2201      	movs	r2, #1
 8000680:	601a      	str	r2, [r3, #0]
			password_of_wifi[counter]='"';
 8000682:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <USART2_EXTI26_IRQHandler+0xec>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a11      	ldr	r2, [pc, #68]	; (80006cc <USART2_EXTI26_IRQHandler+0xf4>)
 8000688:	2122      	movs	r1, #34	; 0x22
 800068a:	54d1      	strb	r1, [r2, r3]
			password_of_wifi[counter+1]='\r';       // demands of the wifi modem
 800068c:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <USART2_EXTI26_IRQHandler+0xec>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	3301      	adds	r3, #1
 8000692:	4a0e      	ldr	r2, [pc, #56]	; (80006cc <USART2_EXTI26_IRQHandler+0xf4>)
 8000694:	210d      	movs	r1, #13
 8000696:	54d1      	strb	r1, [r2, r3]
			password_of_wifi[counter+2]='\n';		// demands of the wifi modem
 8000698:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <USART2_EXTI26_IRQHandler+0xec>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	3302      	adds	r3, #2
 800069e:	4a0b      	ldr	r2, [pc, #44]	; (80006cc <USART2_EXTI26_IRQHandler+0xf4>)
 80006a0:	210a      	movs	r1, #10
 80006a2:	54d1      	strb	r1, [r2, r3]
			counter=0;
 80006a4:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <USART2_EXTI26_IRQHandler+0xec>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
			//print("%s",name_of_wifi);
			//print("%s",password_of_wifi);
		}

}
 80006aa:	e7ff      	b.n	80006ac <USART2_EXTI26_IRQHandler+0xd4>
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	40004400 	.word	0x40004400
 80006bc:	20002959 	.word	0x20002959
 80006c0:	200028b4 	.word	0x200028b4
 80006c4:	20000008 	.word	0x20000008
 80006c8:	20002858 	.word	0x20002858
 80006cc:	20002880 	.word	0x20002880
 80006d0:	200028b8 	.word	0x200028b8

080006d4 <USART1_EXTI25_IRQHandler>:

void USART1_EXTI25_IRQHandler(void)   // interrupt uart for proccessor
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0

		wifi_buffer[count_wifi_buffer]=USART1->RDR;
 80006d8:	4b08      	ldr	r3, [pc, #32]	; (80006fc <USART1_EXTI25_IRQHandler+0x28>)
 80006da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80006dc:	b29a      	uxth	r2, r3
 80006de:	4b08      	ldr	r3, [pc, #32]	; (8000700 <USART1_EXTI25_IRQHandler+0x2c>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	b2d1      	uxtb	r1, r2
 80006e4:	4a07      	ldr	r2, [pc, #28]	; (8000704 <USART1_EXTI25_IRQHandler+0x30>)
 80006e6:	54d1      	strb	r1, [r2, r3]
		count_wifi_buffer++;
 80006e8:	4b05      	ldr	r3, [pc, #20]	; (8000700 <USART1_EXTI25_IRQHandler+0x2c>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	3301      	adds	r3, #1
 80006ee:	4a04      	ldr	r2, [pc, #16]	; (8000700 <USART1_EXTI25_IRQHandler+0x2c>)
 80006f0:	6013      	str	r3, [r2, #0]





}
 80006f2:	bf00      	nop
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	40013800 	.word	0x40013800
 8000700:	200028a8 	.word	0x200028a8
 8000704:	20000148 	.word	0x20000148

08000708 <print>:

void print(char *p_format, ...)
{
 8000708:	b40f      	push	{r0, r1, r2, r3}
 800070a:	b580      	push	{r7, lr}
 800070c:	b082      	sub	sp, #8
 800070e:	af00      	add	r7, sp, #0
	va_list p_variables;
	va_start(p_variables, p_format);
 8000710:	f107 0314 	add.w	r3, r7, #20
 8000714:	607b      	str	r3, [r7, #4]
	(void)vsprintf(A_Buffer, p_format, p_variables);
 8000716:	687a      	ldr	r2, [r7, #4]
 8000718:	6939      	ldr	r1, [r7, #16]
 800071a:	4806      	ldr	r0, [pc, #24]	; (8000734 <print+0x2c>)
 800071c:	f000 f8c6 	bl	80008ac <vsiprintf>
    USART2_print(A_Buffer);
 8000720:	4804      	ldr	r0, [pc, #16]	; (8000734 <print+0x2c>)
 8000722:	f000 f809 	bl	8000738 <USART2_print>
}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000730:	b004      	add	sp, #16
 8000732:	4770      	bx	lr
 8000734:	200000c8 	.word	0x200000c8

08000738 <USART2_print>:


void USART2_print(const char *p_data)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	while(*p_data != '\0')
 8000740:	e00e      	b.n	8000760 <USART2_print+0x28>
	{
		USART2->TDR = *p_data;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	781a      	ldrb	r2, [r3, #0]
 8000746:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <USART2_print+0x40>)
 8000748:	b292      	uxth	r2, r2
 800074a:	851a      	strh	r2, [r3, #40]	; 0x28
        p_data++;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	3301      	adds	r3, #1
 8000750:	607b      	str	r3, [r7, #4]
        while(!(USART2->ISR & 0x00000080));
 8000752:	bf00      	nop
 8000754:	4b08      	ldr	r3, [pc, #32]	; (8000778 <USART2_print+0x40>)
 8000756:	69db      	ldr	r3, [r3, #28]
 8000758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800075c:	2b00      	cmp	r3, #0
 800075e:	d0f9      	beq.n	8000754 <USART2_print+0x1c>
	while(*p_data != '\0')
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d1ec      	bne.n	8000742 <USART2_print+0xa>
	}
}
 8000768:	bf00      	nop
 800076a:	bf00      	nop
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	40004400 	.word	0x40004400

0800077c <wifiConnect>:




void wifiConnect(char* wifi_arr)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	sendCommand(at); // input command 'ATE0'
 8000784:	480b      	ldr	r0, [pc, #44]	; (80007b4 <wifiConnect+0x38>)
 8000786:	f7ff fde7 	bl	8000358 <sendCommand>

	strcat(config_two,wifi_arr);  // union between wifi details and 'AT+CWJAP COMMAND
 800078a:	6879      	ldr	r1, [r7, #4]
 800078c:	480a      	ldr	r0, [pc, #40]	; (80007b8 <wifiConnect+0x3c>)
 800078e:	f000 f867 	bl	8000860 <strcat>

	sendCommand(config_one); // input command 'AT+CWMODE=1'
 8000792:	480a      	ldr	r0, [pc, #40]	; (80007bc <wifiConnect+0x40>)
 8000794:	f7ff fde0 	bl	8000358 <sendCommand>
	count=0;
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <wifiConnect+0x44>)
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]

	sendCommand(config_two); // input command 'AT+CWJAP=wifi details'
 800079e:	4806      	ldr	r0, [pc, #24]	; (80007b8 <wifiConnect+0x3c>)
 80007a0:	f7ff fdda 	bl	8000358 <sendCommand>

		count=0;
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <wifiConnect+0x44>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	2000003c 	.word	0x2000003c
 80007b8:	2000001c 	.word	0x2000001c
 80007bc:	2000000c 	.word	0x2000000c
 80007c0:	200028bc 	.word	0x200028bc

080007c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007c4:	480d      	ldr	r0, [pc, #52]	; (80007fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007c6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80007c8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007cc:	480c      	ldr	r0, [pc, #48]	; (8000800 <LoopForever+0x6>)
  ldr r1, =_edata
 80007ce:	490d      	ldr	r1, [pc, #52]	; (8000804 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007d0:	4a0d      	ldr	r2, [pc, #52]	; (8000808 <LoopForever+0xe>)
  movs r3, #0
 80007d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007d4:	e002      	b.n	80007dc <LoopCopyDataInit>

080007d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007da:	3304      	adds	r3, #4

080007dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007e0:	d3f9      	bcc.n	80007d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007e2:	4a0a      	ldr	r2, [pc, #40]	; (800080c <LoopForever+0x12>)
  ldr r4, =_ebss
 80007e4:	4c0a      	ldr	r4, [pc, #40]	; (8000810 <LoopForever+0x16>)
  movs r3, #0
 80007e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007e8:	e001      	b.n	80007ee <LoopFillZerobss>

080007ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007ec:	3204      	adds	r2, #4

080007ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007f0:	d3fb      	bcc.n	80007ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007f2:	f000 f811 	bl	8000818 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007f6:	f7ff fd53 	bl	80002a0 <main>

080007fa <LoopForever>:

LoopForever:
    b LoopForever
 80007fa:	e7fe      	b.n	80007fa <LoopForever>
  ldr   r0, =_estack
 80007fc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000800:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000804:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8000808:	080011e4 	.word	0x080011e4
  ldr r2, =_sbss
 800080c:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8000810:	20002970 	.word	0x20002970

08000814 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000814:	e7fe      	b.n	8000814 <ADC1_2_IRQHandler>
	...

08000818 <__libc_init_array>:
 8000818:	b570      	push	{r4, r5, r6, lr}
 800081a:	4d0d      	ldr	r5, [pc, #52]	; (8000850 <__libc_init_array+0x38>)
 800081c:	4c0d      	ldr	r4, [pc, #52]	; (8000854 <__libc_init_array+0x3c>)
 800081e:	1b64      	subs	r4, r4, r5
 8000820:	10a4      	asrs	r4, r4, #2
 8000822:	2600      	movs	r6, #0
 8000824:	42a6      	cmp	r6, r4
 8000826:	d109      	bne.n	800083c <__libc_init_array+0x24>
 8000828:	4d0b      	ldr	r5, [pc, #44]	; (8000858 <__libc_init_array+0x40>)
 800082a:	4c0c      	ldr	r4, [pc, #48]	; (800085c <__libc_init_array+0x44>)
 800082c:	f000 fc64 	bl	80010f8 <_init>
 8000830:	1b64      	subs	r4, r4, r5
 8000832:	10a4      	asrs	r4, r4, #2
 8000834:	2600      	movs	r6, #0
 8000836:	42a6      	cmp	r6, r4
 8000838:	d105      	bne.n	8000846 <__libc_init_array+0x2e>
 800083a:	bd70      	pop	{r4, r5, r6, pc}
 800083c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000840:	4798      	blx	r3
 8000842:	3601      	adds	r6, #1
 8000844:	e7ee      	b.n	8000824 <__libc_init_array+0xc>
 8000846:	f855 3b04 	ldr.w	r3, [r5], #4
 800084a:	4798      	blx	r3
 800084c:	3601      	adds	r6, #1
 800084e:	e7f2      	b.n	8000836 <__libc_init_array+0x1e>
 8000850:	080011dc 	.word	0x080011dc
 8000854:	080011dc 	.word	0x080011dc
 8000858:	080011dc 	.word	0x080011dc
 800085c:	080011e0 	.word	0x080011e0

08000860 <strcat>:
 8000860:	b510      	push	{r4, lr}
 8000862:	4602      	mov	r2, r0
 8000864:	7814      	ldrb	r4, [r2, #0]
 8000866:	4613      	mov	r3, r2
 8000868:	3201      	adds	r2, #1
 800086a:	2c00      	cmp	r4, #0
 800086c:	d1fa      	bne.n	8000864 <strcat+0x4>
 800086e:	3b01      	subs	r3, #1
 8000870:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000874:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000878:	2a00      	cmp	r2, #0
 800087a:	d1f9      	bne.n	8000870 <strcat+0x10>
 800087c:	bd10      	pop	{r4, pc}
	...

08000880 <_vsiprintf_r>:
 8000880:	b500      	push	{lr}
 8000882:	b09b      	sub	sp, #108	; 0x6c
 8000884:	9100      	str	r1, [sp, #0]
 8000886:	9104      	str	r1, [sp, #16]
 8000888:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800088c:	9105      	str	r1, [sp, #20]
 800088e:	9102      	str	r1, [sp, #8]
 8000890:	4905      	ldr	r1, [pc, #20]	; (80008a8 <_vsiprintf_r+0x28>)
 8000892:	9103      	str	r1, [sp, #12]
 8000894:	4669      	mov	r1, sp
 8000896:	f000 f86f 	bl	8000978 <_svfiprintf_r>
 800089a:	9b00      	ldr	r3, [sp, #0]
 800089c:	2200      	movs	r2, #0
 800089e:	701a      	strb	r2, [r3, #0]
 80008a0:	b01b      	add	sp, #108	; 0x6c
 80008a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80008a6:	bf00      	nop
 80008a8:	ffff0208 	.word	0xffff0208

080008ac <vsiprintf>:
 80008ac:	4613      	mov	r3, r2
 80008ae:	460a      	mov	r2, r1
 80008b0:	4601      	mov	r1, r0
 80008b2:	4802      	ldr	r0, [pc, #8]	; (80008bc <vsiprintf+0x10>)
 80008b4:	6800      	ldr	r0, [r0, #0]
 80008b6:	f7ff bfe3 	b.w	8000880 <_vsiprintf_r>
 80008ba:	bf00      	nop
 80008bc:	20000044 	.word	0x20000044

080008c0 <__ssputs_r>:
 80008c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c4:	688e      	ldr	r6, [r1, #8]
 80008c6:	429e      	cmp	r6, r3
 80008c8:	4682      	mov	sl, r0
 80008ca:	460c      	mov	r4, r1
 80008cc:	4690      	mov	r8, r2
 80008ce:	461f      	mov	r7, r3
 80008d0:	d838      	bhi.n	8000944 <__ssputs_r+0x84>
 80008d2:	898a      	ldrh	r2, [r1, #12]
 80008d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80008d8:	d032      	beq.n	8000940 <__ssputs_r+0x80>
 80008da:	6825      	ldr	r5, [r4, #0]
 80008dc:	6909      	ldr	r1, [r1, #16]
 80008de:	eba5 0901 	sub.w	r9, r5, r1
 80008e2:	6965      	ldr	r5, [r4, #20]
 80008e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80008e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80008ec:	3301      	adds	r3, #1
 80008ee:	444b      	add	r3, r9
 80008f0:	106d      	asrs	r5, r5, #1
 80008f2:	429d      	cmp	r5, r3
 80008f4:	bf38      	it	cc
 80008f6:	461d      	movcc	r5, r3
 80008f8:	0553      	lsls	r3, r2, #21
 80008fa:	d531      	bpl.n	8000960 <__ssputs_r+0xa0>
 80008fc:	4629      	mov	r1, r5
 80008fe:	f000 fb47 	bl	8000f90 <_malloc_r>
 8000902:	4606      	mov	r6, r0
 8000904:	b950      	cbnz	r0, 800091c <__ssputs_r+0x5c>
 8000906:	230c      	movs	r3, #12
 8000908:	f8ca 3000 	str.w	r3, [sl]
 800090c:	89a3      	ldrh	r3, [r4, #12]
 800090e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000912:	81a3      	strh	r3, [r4, #12]
 8000914:	f04f 30ff 	mov.w	r0, #4294967295
 8000918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800091c:	6921      	ldr	r1, [r4, #16]
 800091e:	464a      	mov	r2, r9
 8000920:	f000 fabe 	bl	8000ea0 <memcpy>
 8000924:	89a3      	ldrh	r3, [r4, #12]
 8000926:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800092a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800092e:	81a3      	strh	r3, [r4, #12]
 8000930:	6126      	str	r6, [r4, #16]
 8000932:	6165      	str	r5, [r4, #20]
 8000934:	444e      	add	r6, r9
 8000936:	eba5 0509 	sub.w	r5, r5, r9
 800093a:	6026      	str	r6, [r4, #0]
 800093c:	60a5      	str	r5, [r4, #8]
 800093e:	463e      	mov	r6, r7
 8000940:	42be      	cmp	r6, r7
 8000942:	d900      	bls.n	8000946 <__ssputs_r+0x86>
 8000944:	463e      	mov	r6, r7
 8000946:	4632      	mov	r2, r6
 8000948:	6820      	ldr	r0, [r4, #0]
 800094a:	4641      	mov	r1, r8
 800094c:	f000 fab6 	bl	8000ebc <memmove>
 8000950:	68a3      	ldr	r3, [r4, #8]
 8000952:	6822      	ldr	r2, [r4, #0]
 8000954:	1b9b      	subs	r3, r3, r6
 8000956:	4432      	add	r2, r6
 8000958:	60a3      	str	r3, [r4, #8]
 800095a:	6022      	str	r2, [r4, #0]
 800095c:	2000      	movs	r0, #0
 800095e:	e7db      	b.n	8000918 <__ssputs_r+0x58>
 8000960:	462a      	mov	r2, r5
 8000962:	f000 fb6f 	bl	8001044 <_realloc_r>
 8000966:	4606      	mov	r6, r0
 8000968:	2800      	cmp	r0, #0
 800096a:	d1e1      	bne.n	8000930 <__ssputs_r+0x70>
 800096c:	6921      	ldr	r1, [r4, #16]
 800096e:	4650      	mov	r0, sl
 8000970:	f000 fabe 	bl	8000ef0 <_free_r>
 8000974:	e7c7      	b.n	8000906 <__ssputs_r+0x46>
	...

08000978 <_svfiprintf_r>:
 8000978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800097c:	4698      	mov	r8, r3
 800097e:	898b      	ldrh	r3, [r1, #12]
 8000980:	061b      	lsls	r3, r3, #24
 8000982:	b09d      	sub	sp, #116	; 0x74
 8000984:	4607      	mov	r7, r0
 8000986:	460d      	mov	r5, r1
 8000988:	4614      	mov	r4, r2
 800098a:	d50e      	bpl.n	80009aa <_svfiprintf_r+0x32>
 800098c:	690b      	ldr	r3, [r1, #16]
 800098e:	b963      	cbnz	r3, 80009aa <_svfiprintf_r+0x32>
 8000990:	2140      	movs	r1, #64	; 0x40
 8000992:	f000 fafd 	bl	8000f90 <_malloc_r>
 8000996:	6028      	str	r0, [r5, #0]
 8000998:	6128      	str	r0, [r5, #16]
 800099a:	b920      	cbnz	r0, 80009a6 <_svfiprintf_r+0x2e>
 800099c:	230c      	movs	r3, #12
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	e0d1      	b.n	8000b4a <_svfiprintf_r+0x1d2>
 80009a6:	2340      	movs	r3, #64	; 0x40
 80009a8:	616b      	str	r3, [r5, #20]
 80009aa:	2300      	movs	r3, #0
 80009ac:	9309      	str	r3, [sp, #36]	; 0x24
 80009ae:	2320      	movs	r3, #32
 80009b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80009b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80009b8:	2330      	movs	r3, #48	; 0x30
 80009ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8000b64 <_svfiprintf_r+0x1ec>
 80009be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80009c2:	f04f 0901 	mov.w	r9, #1
 80009c6:	4623      	mov	r3, r4
 80009c8:	469a      	mov	sl, r3
 80009ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80009ce:	b10a      	cbz	r2, 80009d4 <_svfiprintf_r+0x5c>
 80009d0:	2a25      	cmp	r2, #37	; 0x25
 80009d2:	d1f9      	bne.n	80009c8 <_svfiprintf_r+0x50>
 80009d4:	ebba 0b04 	subs.w	fp, sl, r4
 80009d8:	d00b      	beq.n	80009f2 <_svfiprintf_r+0x7a>
 80009da:	465b      	mov	r3, fp
 80009dc:	4622      	mov	r2, r4
 80009de:	4629      	mov	r1, r5
 80009e0:	4638      	mov	r0, r7
 80009e2:	f7ff ff6d 	bl	80008c0 <__ssputs_r>
 80009e6:	3001      	adds	r0, #1
 80009e8:	f000 80aa 	beq.w	8000b40 <_svfiprintf_r+0x1c8>
 80009ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80009ee:	445a      	add	r2, fp
 80009f0:	9209      	str	r2, [sp, #36]	; 0x24
 80009f2:	f89a 3000 	ldrb.w	r3, [sl]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	f000 80a2 	beq.w	8000b40 <_svfiprintf_r+0x1c8>
 80009fc:	2300      	movs	r3, #0
 80009fe:	f04f 32ff 	mov.w	r2, #4294967295
 8000a02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000a06:	f10a 0a01 	add.w	sl, sl, #1
 8000a0a:	9304      	str	r3, [sp, #16]
 8000a0c:	9307      	str	r3, [sp, #28]
 8000a0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000a12:	931a      	str	r3, [sp, #104]	; 0x68
 8000a14:	4654      	mov	r4, sl
 8000a16:	2205      	movs	r2, #5
 8000a18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a1c:	4851      	ldr	r0, [pc, #324]	; (8000b64 <_svfiprintf_r+0x1ec>)
 8000a1e:	f7ff fbdf 	bl	80001e0 <memchr>
 8000a22:	9a04      	ldr	r2, [sp, #16]
 8000a24:	b9d8      	cbnz	r0, 8000a5e <_svfiprintf_r+0xe6>
 8000a26:	06d0      	lsls	r0, r2, #27
 8000a28:	bf44      	itt	mi
 8000a2a:	2320      	movmi	r3, #32
 8000a2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000a30:	0711      	lsls	r1, r2, #28
 8000a32:	bf44      	itt	mi
 8000a34:	232b      	movmi	r3, #43	; 0x2b
 8000a36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000a3a:	f89a 3000 	ldrb.w	r3, [sl]
 8000a3e:	2b2a      	cmp	r3, #42	; 0x2a
 8000a40:	d015      	beq.n	8000a6e <_svfiprintf_r+0xf6>
 8000a42:	9a07      	ldr	r2, [sp, #28]
 8000a44:	4654      	mov	r4, sl
 8000a46:	2000      	movs	r0, #0
 8000a48:	f04f 0c0a 	mov.w	ip, #10
 8000a4c:	4621      	mov	r1, r4
 8000a4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000a52:	3b30      	subs	r3, #48	; 0x30
 8000a54:	2b09      	cmp	r3, #9
 8000a56:	d94e      	bls.n	8000af6 <_svfiprintf_r+0x17e>
 8000a58:	b1b0      	cbz	r0, 8000a88 <_svfiprintf_r+0x110>
 8000a5a:	9207      	str	r2, [sp, #28]
 8000a5c:	e014      	b.n	8000a88 <_svfiprintf_r+0x110>
 8000a5e:	eba0 0308 	sub.w	r3, r0, r8
 8000a62:	fa09 f303 	lsl.w	r3, r9, r3
 8000a66:	4313      	orrs	r3, r2
 8000a68:	9304      	str	r3, [sp, #16]
 8000a6a:	46a2      	mov	sl, r4
 8000a6c:	e7d2      	b.n	8000a14 <_svfiprintf_r+0x9c>
 8000a6e:	9b03      	ldr	r3, [sp, #12]
 8000a70:	1d19      	adds	r1, r3, #4
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	9103      	str	r1, [sp, #12]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	bfbb      	ittet	lt
 8000a7a:	425b      	neglt	r3, r3
 8000a7c:	f042 0202 	orrlt.w	r2, r2, #2
 8000a80:	9307      	strge	r3, [sp, #28]
 8000a82:	9307      	strlt	r3, [sp, #28]
 8000a84:	bfb8      	it	lt
 8000a86:	9204      	strlt	r2, [sp, #16]
 8000a88:	7823      	ldrb	r3, [r4, #0]
 8000a8a:	2b2e      	cmp	r3, #46	; 0x2e
 8000a8c:	d10c      	bne.n	8000aa8 <_svfiprintf_r+0x130>
 8000a8e:	7863      	ldrb	r3, [r4, #1]
 8000a90:	2b2a      	cmp	r3, #42	; 0x2a
 8000a92:	d135      	bne.n	8000b00 <_svfiprintf_r+0x188>
 8000a94:	9b03      	ldr	r3, [sp, #12]
 8000a96:	1d1a      	adds	r2, r3, #4
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	9203      	str	r2, [sp, #12]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	bfb8      	it	lt
 8000aa0:	f04f 33ff 	movlt.w	r3, #4294967295
 8000aa4:	3402      	adds	r4, #2
 8000aa6:	9305      	str	r3, [sp, #20]
 8000aa8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8000b74 <_svfiprintf_r+0x1fc>
 8000aac:	7821      	ldrb	r1, [r4, #0]
 8000aae:	2203      	movs	r2, #3
 8000ab0:	4650      	mov	r0, sl
 8000ab2:	f7ff fb95 	bl	80001e0 <memchr>
 8000ab6:	b140      	cbz	r0, 8000aca <_svfiprintf_r+0x152>
 8000ab8:	2340      	movs	r3, #64	; 0x40
 8000aba:	eba0 000a 	sub.w	r0, r0, sl
 8000abe:	fa03 f000 	lsl.w	r0, r3, r0
 8000ac2:	9b04      	ldr	r3, [sp, #16]
 8000ac4:	4303      	orrs	r3, r0
 8000ac6:	3401      	adds	r4, #1
 8000ac8:	9304      	str	r3, [sp, #16]
 8000aca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ace:	4826      	ldr	r0, [pc, #152]	; (8000b68 <_svfiprintf_r+0x1f0>)
 8000ad0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000ad4:	2206      	movs	r2, #6
 8000ad6:	f7ff fb83 	bl	80001e0 <memchr>
 8000ada:	2800      	cmp	r0, #0
 8000adc:	d038      	beq.n	8000b50 <_svfiprintf_r+0x1d8>
 8000ade:	4b23      	ldr	r3, [pc, #140]	; (8000b6c <_svfiprintf_r+0x1f4>)
 8000ae0:	bb1b      	cbnz	r3, 8000b2a <_svfiprintf_r+0x1b2>
 8000ae2:	9b03      	ldr	r3, [sp, #12]
 8000ae4:	3307      	adds	r3, #7
 8000ae6:	f023 0307 	bic.w	r3, r3, #7
 8000aea:	3308      	adds	r3, #8
 8000aec:	9303      	str	r3, [sp, #12]
 8000aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000af0:	4433      	add	r3, r6
 8000af2:	9309      	str	r3, [sp, #36]	; 0x24
 8000af4:	e767      	b.n	80009c6 <_svfiprintf_r+0x4e>
 8000af6:	fb0c 3202 	mla	r2, ip, r2, r3
 8000afa:	460c      	mov	r4, r1
 8000afc:	2001      	movs	r0, #1
 8000afe:	e7a5      	b.n	8000a4c <_svfiprintf_r+0xd4>
 8000b00:	2300      	movs	r3, #0
 8000b02:	3401      	adds	r4, #1
 8000b04:	9305      	str	r3, [sp, #20]
 8000b06:	4619      	mov	r1, r3
 8000b08:	f04f 0c0a 	mov.w	ip, #10
 8000b0c:	4620      	mov	r0, r4
 8000b0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000b12:	3a30      	subs	r2, #48	; 0x30
 8000b14:	2a09      	cmp	r2, #9
 8000b16:	d903      	bls.n	8000b20 <_svfiprintf_r+0x1a8>
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d0c5      	beq.n	8000aa8 <_svfiprintf_r+0x130>
 8000b1c:	9105      	str	r1, [sp, #20]
 8000b1e:	e7c3      	b.n	8000aa8 <_svfiprintf_r+0x130>
 8000b20:	fb0c 2101 	mla	r1, ip, r1, r2
 8000b24:	4604      	mov	r4, r0
 8000b26:	2301      	movs	r3, #1
 8000b28:	e7f0      	b.n	8000b0c <_svfiprintf_r+0x194>
 8000b2a:	ab03      	add	r3, sp, #12
 8000b2c:	9300      	str	r3, [sp, #0]
 8000b2e:	462a      	mov	r2, r5
 8000b30:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <_svfiprintf_r+0x1f8>)
 8000b32:	a904      	add	r1, sp, #16
 8000b34:	4638      	mov	r0, r7
 8000b36:	f3af 8000 	nop.w
 8000b3a:	1c42      	adds	r2, r0, #1
 8000b3c:	4606      	mov	r6, r0
 8000b3e:	d1d6      	bne.n	8000aee <_svfiprintf_r+0x176>
 8000b40:	89ab      	ldrh	r3, [r5, #12]
 8000b42:	065b      	lsls	r3, r3, #25
 8000b44:	f53f af2c 	bmi.w	80009a0 <_svfiprintf_r+0x28>
 8000b48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000b4a:	b01d      	add	sp, #116	; 0x74
 8000b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b50:	ab03      	add	r3, sp, #12
 8000b52:	9300      	str	r3, [sp, #0]
 8000b54:	462a      	mov	r2, r5
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <_svfiprintf_r+0x1f8>)
 8000b58:	a904      	add	r1, sp, #16
 8000b5a:	4638      	mov	r0, r7
 8000b5c:	f000 f87a 	bl	8000c54 <_printf_i>
 8000b60:	e7eb      	b.n	8000b3a <_svfiprintf_r+0x1c2>
 8000b62:	bf00      	nop
 8000b64:	080011a6 	.word	0x080011a6
 8000b68:	080011b0 	.word	0x080011b0
 8000b6c:	00000000 	.word	0x00000000
 8000b70:	080008c1 	.word	0x080008c1
 8000b74:	080011ac 	.word	0x080011ac

08000b78 <_printf_common>:
 8000b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b7c:	4616      	mov	r6, r2
 8000b7e:	4699      	mov	r9, r3
 8000b80:	688a      	ldr	r2, [r1, #8]
 8000b82:	690b      	ldr	r3, [r1, #16]
 8000b84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	bfb8      	it	lt
 8000b8c:	4613      	movlt	r3, r2
 8000b8e:	6033      	str	r3, [r6, #0]
 8000b90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000b94:	4607      	mov	r7, r0
 8000b96:	460c      	mov	r4, r1
 8000b98:	b10a      	cbz	r2, 8000b9e <_printf_common+0x26>
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	6033      	str	r3, [r6, #0]
 8000b9e:	6823      	ldr	r3, [r4, #0]
 8000ba0:	0699      	lsls	r1, r3, #26
 8000ba2:	bf42      	ittt	mi
 8000ba4:	6833      	ldrmi	r3, [r6, #0]
 8000ba6:	3302      	addmi	r3, #2
 8000ba8:	6033      	strmi	r3, [r6, #0]
 8000baa:	6825      	ldr	r5, [r4, #0]
 8000bac:	f015 0506 	ands.w	r5, r5, #6
 8000bb0:	d106      	bne.n	8000bc0 <_printf_common+0x48>
 8000bb2:	f104 0a19 	add.w	sl, r4, #25
 8000bb6:	68e3      	ldr	r3, [r4, #12]
 8000bb8:	6832      	ldr	r2, [r6, #0]
 8000bba:	1a9b      	subs	r3, r3, r2
 8000bbc:	42ab      	cmp	r3, r5
 8000bbe:	dc26      	bgt.n	8000c0e <_printf_common+0x96>
 8000bc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000bc4:	1e13      	subs	r3, r2, #0
 8000bc6:	6822      	ldr	r2, [r4, #0]
 8000bc8:	bf18      	it	ne
 8000bca:	2301      	movne	r3, #1
 8000bcc:	0692      	lsls	r2, r2, #26
 8000bce:	d42b      	bmi.n	8000c28 <_printf_common+0xb0>
 8000bd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000bd4:	4649      	mov	r1, r9
 8000bd6:	4638      	mov	r0, r7
 8000bd8:	47c0      	blx	r8
 8000bda:	3001      	adds	r0, #1
 8000bdc:	d01e      	beq.n	8000c1c <_printf_common+0xa4>
 8000bde:	6823      	ldr	r3, [r4, #0]
 8000be0:	68e5      	ldr	r5, [r4, #12]
 8000be2:	6832      	ldr	r2, [r6, #0]
 8000be4:	f003 0306 	and.w	r3, r3, #6
 8000be8:	2b04      	cmp	r3, #4
 8000bea:	bf08      	it	eq
 8000bec:	1aad      	subeq	r5, r5, r2
 8000bee:	68a3      	ldr	r3, [r4, #8]
 8000bf0:	6922      	ldr	r2, [r4, #16]
 8000bf2:	bf0c      	ite	eq
 8000bf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000bf8:	2500      	movne	r5, #0
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	bfc4      	itt	gt
 8000bfe:	1a9b      	subgt	r3, r3, r2
 8000c00:	18ed      	addgt	r5, r5, r3
 8000c02:	2600      	movs	r6, #0
 8000c04:	341a      	adds	r4, #26
 8000c06:	42b5      	cmp	r5, r6
 8000c08:	d11a      	bne.n	8000c40 <_printf_common+0xc8>
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	e008      	b.n	8000c20 <_printf_common+0xa8>
 8000c0e:	2301      	movs	r3, #1
 8000c10:	4652      	mov	r2, sl
 8000c12:	4649      	mov	r1, r9
 8000c14:	4638      	mov	r0, r7
 8000c16:	47c0      	blx	r8
 8000c18:	3001      	adds	r0, #1
 8000c1a:	d103      	bne.n	8000c24 <_printf_common+0xac>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c24:	3501      	adds	r5, #1
 8000c26:	e7c6      	b.n	8000bb6 <_printf_common+0x3e>
 8000c28:	18e1      	adds	r1, r4, r3
 8000c2a:	1c5a      	adds	r2, r3, #1
 8000c2c:	2030      	movs	r0, #48	; 0x30
 8000c2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000c32:	4422      	add	r2, r4
 8000c34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000c38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000c3c:	3302      	adds	r3, #2
 8000c3e:	e7c7      	b.n	8000bd0 <_printf_common+0x58>
 8000c40:	2301      	movs	r3, #1
 8000c42:	4622      	mov	r2, r4
 8000c44:	4649      	mov	r1, r9
 8000c46:	4638      	mov	r0, r7
 8000c48:	47c0      	blx	r8
 8000c4a:	3001      	adds	r0, #1
 8000c4c:	d0e6      	beq.n	8000c1c <_printf_common+0xa4>
 8000c4e:	3601      	adds	r6, #1
 8000c50:	e7d9      	b.n	8000c06 <_printf_common+0x8e>
	...

08000c54 <_printf_i>:
 8000c54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000c58:	460c      	mov	r4, r1
 8000c5a:	4691      	mov	r9, r2
 8000c5c:	7e27      	ldrb	r7, [r4, #24]
 8000c5e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000c60:	2f78      	cmp	r7, #120	; 0x78
 8000c62:	4680      	mov	r8, r0
 8000c64:	469a      	mov	sl, r3
 8000c66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000c6a:	d807      	bhi.n	8000c7c <_printf_i+0x28>
 8000c6c:	2f62      	cmp	r7, #98	; 0x62
 8000c6e:	d80a      	bhi.n	8000c86 <_printf_i+0x32>
 8000c70:	2f00      	cmp	r7, #0
 8000c72:	f000 80d8 	beq.w	8000e26 <_printf_i+0x1d2>
 8000c76:	2f58      	cmp	r7, #88	; 0x58
 8000c78:	f000 80a3 	beq.w	8000dc2 <_printf_i+0x16e>
 8000c7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000c80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000c84:	e03a      	b.n	8000cfc <_printf_i+0xa8>
 8000c86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000c8a:	2b15      	cmp	r3, #21
 8000c8c:	d8f6      	bhi.n	8000c7c <_printf_i+0x28>
 8000c8e:	a001      	add	r0, pc, #4	; (adr r0, 8000c94 <_printf_i+0x40>)
 8000c90:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8000c94:	08000ced 	.word	0x08000ced
 8000c98:	08000d01 	.word	0x08000d01
 8000c9c:	08000c7d 	.word	0x08000c7d
 8000ca0:	08000c7d 	.word	0x08000c7d
 8000ca4:	08000c7d 	.word	0x08000c7d
 8000ca8:	08000c7d 	.word	0x08000c7d
 8000cac:	08000d01 	.word	0x08000d01
 8000cb0:	08000c7d 	.word	0x08000c7d
 8000cb4:	08000c7d 	.word	0x08000c7d
 8000cb8:	08000c7d 	.word	0x08000c7d
 8000cbc:	08000c7d 	.word	0x08000c7d
 8000cc0:	08000e0d 	.word	0x08000e0d
 8000cc4:	08000d31 	.word	0x08000d31
 8000cc8:	08000def 	.word	0x08000def
 8000ccc:	08000c7d 	.word	0x08000c7d
 8000cd0:	08000c7d 	.word	0x08000c7d
 8000cd4:	08000e2f 	.word	0x08000e2f
 8000cd8:	08000c7d 	.word	0x08000c7d
 8000cdc:	08000d31 	.word	0x08000d31
 8000ce0:	08000c7d 	.word	0x08000c7d
 8000ce4:	08000c7d 	.word	0x08000c7d
 8000ce8:	08000df7 	.word	0x08000df7
 8000cec:	680b      	ldr	r3, [r1, #0]
 8000cee:	1d1a      	adds	r2, r3, #4
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	600a      	str	r2, [r1, #0]
 8000cf4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000cf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	e0a3      	b.n	8000e48 <_printf_i+0x1f4>
 8000d00:	6825      	ldr	r5, [r4, #0]
 8000d02:	6808      	ldr	r0, [r1, #0]
 8000d04:	062e      	lsls	r6, r5, #24
 8000d06:	f100 0304 	add.w	r3, r0, #4
 8000d0a:	d50a      	bpl.n	8000d22 <_printf_i+0xce>
 8000d0c:	6805      	ldr	r5, [r0, #0]
 8000d0e:	600b      	str	r3, [r1, #0]
 8000d10:	2d00      	cmp	r5, #0
 8000d12:	da03      	bge.n	8000d1c <_printf_i+0xc8>
 8000d14:	232d      	movs	r3, #45	; 0x2d
 8000d16:	426d      	negs	r5, r5
 8000d18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000d1c:	485e      	ldr	r0, [pc, #376]	; (8000e98 <_printf_i+0x244>)
 8000d1e:	230a      	movs	r3, #10
 8000d20:	e019      	b.n	8000d56 <_printf_i+0x102>
 8000d22:	f015 0f40 	tst.w	r5, #64	; 0x40
 8000d26:	6805      	ldr	r5, [r0, #0]
 8000d28:	600b      	str	r3, [r1, #0]
 8000d2a:	bf18      	it	ne
 8000d2c:	b22d      	sxthne	r5, r5
 8000d2e:	e7ef      	b.n	8000d10 <_printf_i+0xbc>
 8000d30:	680b      	ldr	r3, [r1, #0]
 8000d32:	6825      	ldr	r5, [r4, #0]
 8000d34:	1d18      	adds	r0, r3, #4
 8000d36:	6008      	str	r0, [r1, #0]
 8000d38:	0628      	lsls	r0, r5, #24
 8000d3a:	d501      	bpl.n	8000d40 <_printf_i+0xec>
 8000d3c:	681d      	ldr	r5, [r3, #0]
 8000d3e:	e002      	b.n	8000d46 <_printf_i+0xf2>
 8000d40:	0669      	lsls	r1, r5, #25
 8000d42:	d5fb      	bpl.n	8000d3c <_printf_i+0xe8>
 8000d44:	881d      	ldrh	r5, [r3, #0]
 8000d46:	4854      	ldr	r0, [pc, #336]	; (8000e98 <_printf_i+0x244>)
 8000d48:	2f6f      	cmp	r7, #111	; 0x6f
 8000d4a:	bf0c      	ite	eq
 8000d4c:	2308      	moveq	r3, #8
 8000d4e:	230a      	movne	r3, #10
 8000d50:	2100      	movs	r1, #0
 8000d52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000d56:	6866      	ldr	r6, [r4, #4]
 8000d58:	60a6      	str	r6, [r4, #8]
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	bfa2      	ittt	ge
 8000d5e:	6821      	ldrge	r1, [r4, #0]
 8000d60:	f021 0104 	bicge.w	r1, r1, #4
 8000d64:	6021      	strge	r1, [r4, #0]
 8000d66:	b90d      	cbnz	r5, 8000d6c <_printf_i+0x118>
 8000d68:	2e00      	cmp	r6, #0
 8000d6a:	d04d      	beq.n	8000e08 <_printf_i+0x1b4>
 8000d6c:	4616      	mov	r6, r2
 8000d6e:	fbb5 f1f3 	udiv	r1, r5, r3
 8000d72:	fb03 5711 	mls	r7, r3, r1, r5
 8000d76:	5dc7      	ldrb	r7, [r0, r7]
 8000d78:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000d7c:	462f      	mov	r7, r5
 8000d7e:	42bb      	cmp	r3, r7
 8000d80:	460d      	mov	r5, r1
 8000d82:	d9f4      	bls.n	8000d6e <_printf_i+0x11a>
 8000d84:	2b08      	cmp	r3, #8
 8000d86:	d10b      	bne.n	8000da0 <_printf_i+0x14c>
 8000d88:	6823      	ldr	r3, [r4, #0]
 8000d8a:	07df      	lsls	r7, r3, #31
 8000d8c:	d508      	bpl.n	8000da0 <_printf_i+0x14c>
 8000d8e:	6923      	ldr	r3, [r4, #16]
 8000d90:	6861      	ldr	r1, [r4, #4]
 8000d92:	4299      	cmp	r1, r3
 8000d94:	bfde      	ittt	le
 8000d96:	2330      	movle	r3, #48	; 0x30
 8000d98:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000d9c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000da0:	1b92      	subs	r2, r2, r6
 8000da2:	6122      	str	r2, [r4, #16]
 8000da4:	f8cd a000 	str.w	sl, [sp]
 8000da8:	464b      	mov	r3, r9
 8000daa:	aa03      	add	r2, sp, #12
 8000dac:	4621      	mov	r1, r4
 8000dae:	4640      	mov	r0, r8
 8000db0:	f7ff fee2 	bl	8000b78 <_printf_common>
 8000db4:	3001      	adds	r0, #1
 8000db6:	d14c      	bne.n	8000e52 <_printf_i+0x1fe>
 8000db8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dbc:	b004      	add	sp, #16
 8000dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc2:	4835      	ldr	r0, [pc, #212]	; (8000e98 <_printf_i+0x244>)
 8000dc4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8000dc8:	6823      	ldr	r3, [r4, #0]
 8000dca:	680e      	ldr	r6, [r1, #0]
 8000dcc:	061f      	lsls	r7, r3, #24
 8000dce:	f856 5b04 	ldr.w	r5, [r6], #4
 8000dd2:	600e      	str	r6, [r1, #0]
 8000dd4:	d514      	bpl.n	8000e00 <_printf_i+0x1ac>
 8000dd6:	07d9      	lsls	r1, r3, #31
 8000dd8:	bf44      	itt	mi
 8000dda:	f043 0320 	orrmi.w	r3, r3, #32
 8000dde:	6023      	strmi	r3, [r4, #0]
 8000de0:	b91d      	cbnz	r5, 8000dea <_printf_i+0x196>
 8000de2:	6823      	ldr	r3, [r4, #0]
 8000de4:	f023 0320 	bic.w	r3, r3, #32
 8000de8:	6023      	str	r3, [r4, #0]
 8000dea:	2310      	movs	r3, #16
 8000dec:	e7b0      	b.n	8000d50 <_printf_i+0xfc>
 8000dee:	6823      	ldr	r3, [r4, #0]
 8000df0:	f043 0320 	orr.w	r3, r3, #32
 8000df4:	6023      	str	r3, [r4, #0]
 8000df6:	2378      	movs	r3, #120	; 0x78
 8000df8:	4828      	ldr	r0, [pc, #160]	; (8000e9c <_printf_i+0x248>)
 8000dfa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000dfe:	e7e3      	b.n	8000dc8 <_printf_i+0x174>
 8000e00:	065e      	lsls	r6, r3, #25
 8000e02:	bf48      	it	mi
 8000e04:	b2ad      	uxthmi	r5, r5
 8000e06:	e7e6      	b.n	8000dd6 <_printf_i+0x182>
 8000e08:	4616      	mov	r6, r2
 8000e0a:	e7bb      	b.n	8000d84 <_printf_i+0x130>
 8000e0c:	680b      	ldr	r3, [r1, #0]
 8000e0e:	6826      	ldr	r6, [r4, #0]
 8000e10:	6960      	ldr	r0, [r4, #20]
 8000e12:	1d1d      	adds	r5, r3, #4
 8000e14:	600d      	str	r5, [r1, #0]
 8000e16:	0635      	lsls	r5, r6, #24
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	d501      	bpl.n	8000e20 <_printf_i+0x1cc>
 8000e1c:	6018      	str	r0, [r3, #0]
 8000e1e:	e002      	b.n	8000e26 <_printf_i+0x1d2>
 8000e20:	0671      	lsls	r1, r6, #25
 8000e22:	d5fb      	bpl.n	8000e1c <_printf_i+0x1c8>
 8000e24:	8018      	strh	r0, [r3, #0]
 8000e26:	2300      	movs	r3, #0
 8000e28:	6123      	str	r3, [r4, #16]
 8000e2a:	4616      	mov	r6, r2
 8000e2c:	e7ba      	b.n	8000da4 <_printf_i+0x150>
 8000e2e:	680b      	ldr	r3, [r1, #0]
 8000e30:	1d1a      	adds	r2, r3, #4
 8000e32:	600a      	str	r2, [r1, #0]
 8000e34:	681e      	ldr	r6, [r3, #0]
 8000e36:	6862      	ldr	r2, [r4, #4]
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4630      	mov	r0, r6
 8000e3c:	f7ff f9d0 	bl	80001e0 <memchr>
 8000e40:	b108      	cbz	r0, 8000e46 <_printf_i+0x1f2>
 8000e42:	1b80      	subs	r0, r0, r6
 8000e44:	6060      	str	r0, [r4, #4]
 8000e46:	6863      	ldr	r3, [r4, #4]
 8000e48:	6123      	str	r3, [r4, #16]
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000e50:	e7a8      	b.n	8000da4 <_printf_i+0x150>
 8000e52:	6923      	ldr	r3, [r4, #16]
 8000e54:	4632      	mov	r2, r6
 8000e56:	4649      	mov	r1, r9
 8000e58:	4640      	mov	r0, r8
 8000e5a:	47d0      	blx	sl
 8000e5c:	3001      	adds	r0, #1
 8000e5e:	d0ab      	beq.n	8000db8 <_printf_i+0x164>
 8000e60:	6823      	ldr	r3, [r4, #0]
 8000e62:	079b      	lsls	r3, r3, #30
 8000e64:	d413      	bmi.n	8000e8e <_printf_i+0x23a>
 8000e66:	68e0      	ldr	r0, [r4, #12]
 8000e68:	9b03      	ldr	r3, [sp, #12]
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	bfb8      	it	lt
 8000e6e:	4618      	movlt	r0, r3
 8000e70:	e7a4      	b.n	8000dbc <_printf_i+0x168>
 8000e72:	2301      	movs	r3, #1
 8000e74:	4632      	mov	r2, r6
 8000e76:	4649      	mov	r1, r9
 8000e78:	4640      	mov	r0, r8
 8000e7a:	47d0      	blx	sl
 8000e7c:	3001      	adds	r0, #1
 8000e7e:	d09b      	beq.n	8000db8 <_printf_i+0x164>
 8000e80:	3501      	adds	r5, #1
 8000e82:	68e3      	ldr	r3, [r4, #12]
 8000e84:	9903      	ldr	r1, [sp, #12]
 8000e86:	1a5b      	subs	r3, r3, r1
 8000e88:	42ab      	cmp	r3, r5
 8000e8a:	dcf2      	bgt.n	8000e72 <_printf_i+0x21e>
 8000e8c:	e7eb      	b.n	8000e66 <_printf_i+0x212>
 8000e8e:	2500      	movs	r5, #0
 8000e90:	f104 0619 	add.w	r6, r4, #25
 8000e94:	e7f5      	b.n	8000e82 <_printf_i+0x22e>
 8000e96:	bf00      	nop
 8000e98:	080011b7 	.word	0x080011b7
 8000e9c:	080011c8 	.word	0x080011c8

08000ea0 <memcpy>:
 8000ea0:	440a      	add	r2, r1
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ea8:	d100      	bne.n	8000eac <memcpy+0xc>
 8000eaa:	4770      	bx	lr
 8000eac:	b510      	push	{r4, lr}
 8000eae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000eb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000eb6:	4291      	cmp	r1, r2
 8000eb8:	d1f9      	bne.n	8000eae <memcpy+0xe>
 8000eba:	bd10      	pop	{r4, pc}

08000ebc <memmove>:
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	b510      	push	{r4, lr}
 8000ec0:	eb01 0402 	add.w	r4, r1, r2
 8000ec4:	d902      	bls.n	8000ecc <memmove+0x10>
 8000ec6:	4284      	cmp	r4, r0
 8000ec8:	4623      	mov	r3, r4
 8000eca:	d807      	bhi.n	8000edc <memmove+0x20>
 8000ecc:	1e43      	subs	r3, r0, #1
 8000ece:	42a1      	cmp	r1, r4
 8000ed0:	d008      	beq.n	8000ee4 <memmove+0x28>
 8000ed2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000ed6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000eda:	e7f8      	b.n	8000ece <memmove+0x12>
 8000edc:	4402      	add	r2, r0
 8000ede:	4601      	mov	r1, r0
 8000ee0:	428a      	cmp	r2, r1
 8000ee2:	d100      	bne.n	8000ee6 <memmove+0x2a>
 8000ee4:	bd10      	pop	{r4, pc}
 8000ee6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000eea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000eee:	e7f7      	b.n	8000ee0 <memmove+0x24>

08000ef0 <_free_r>:
 8000ef0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000ef2:	2900      	cmp	r1, #0
 8000ef4:	d048      	beq.n	8000f88 <_free_r+0x98>
 8000ef6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000efa:	9001      	str	r0, [sp, #4]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	f1a1 0404 	sub.w	r4, r1, #4
 8000f02:	bfb8      	it	lt
 8000f04:	18e4      	addlt	r4, r4, r3
 8000f06:	f000 f8d3 	bl	80010b0 <__malloc_lock>
 8000f0a:	4a20      	ldr	r2, [pc, #128]	; (8000f8c <_free_r+0x9c>)
 8000f0c:	9801      	ldr	r0, [sp, #4]
 8000f0e:	6813      	ldr	r3, [r2, #0]
 8000f10:	4615      	mov	r5, r2
 8000f12:	b933      	cbnz	r3, 8000f22 <_free_r+0x32>
 8000f14:	6063      	str	r3, [r4, #4]
 8000f16:	6014      	str	r4, [r2, #0]
 8000f18:	b003      	add	sp, #12
 8000f1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000f1e:	f000 b8cd 	b.w	80010bc <__malloc_unlock>
 8000f22:	42a3      	cmp	r3, r4
 8000f24:	d90b      	bls.n	8000f3e <_free_r+0x4e>
 8000f26:	6821      	ldr	r1, [r4, #0]
 8000f28:	1862      	adds	r2, r4, r1
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	bf04      	itt	eq
 8000f2e:	681a      	ldreq	r2, [r3, #0]
 8000f30:	685b      	ldreq	r3, [r3, #4]
 8000f32:	6063      	str	r3, [r4, #4]
 8000f34:	bf04      	itt	eq
 8000f36:	1852      	addeq	r2, r2, r1
 8000f38:	6022      	streq	r2, [r4, #0]
 8000f3a:	602c      	str	r4, [r5, #0]
 8000f3c:	e7ec      	b.n	8000f18 <_free_r+0x28>
 8000f3e:	461a      	mov	r2, r3
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	b10b      	cbz	r3, 8000f48 <_free_r+0x58>
 8000f44:	42a3      	cmp	r3, r4
 8000f46:	d9fa      	bls.n	8000f3e <_free_r+0x4e>
 8000f48:	6811      	ldr	r1, [r2, #0]
 8000f4a:	1855      	adds	r5, r2, r1
 8000f4c:	42a5      	cmp	r5, r4
 8000f4e:	d10b      	bne.n	8000f68 <_free_r+0x78>
 8000f50:	6824      	ldr	r4, [r4, #0]
 8000f52:	4421      	add	r1, r4
 8000f54:	1854      	adds	r4, r2, r1
 8000f56:	42a3      	cmp	r3, r4
 8000f58:	6011      	str	r1, [r2, #0]
 8000f5a:	d1dd      	bne.n	8000f18 <_free_r+0x28>
 8000f5c:	681c      	ldr	r4, [r3, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	6053      	str	r3, [r2, #4]
 8000f62:	4421      	add	r1, r4
 8000f64:	6011      	str	r1, [r2, #0]
 8000f66:	e7d7      	b.n	8000f18 <_free_r+0x28>
 8000f68:	d902      	bls.n	8000f70 <_free_r+0x80>
 8000f6a:	230c      	movs	r3, #12
 8000f6c:	6003      	str	r3, [r0, #0]
 8000f6e:	e7d3      	b.n	8000f18 <_free_r+0x28>
 8000f70:	6825      	ldr	r5, [r4, #0]
 8000f72:	1961      	adds	r1, r4, r5
 8000f74:	428b      	cmp	r3, r1
 8000f76:	bf04      	itt	eq
 8000f78:	6819      	ldreq	r1, [r3, #0]
 8000f7a:	685b      	ldreq	r3, [r3, #4]
 8000f7c:	6063      	str	r3, [r4, #4]
 8000f7e:	bf04      	itt	eq
 8000f80:	1949      	addeq	r1, r1, r5
 8000f82:	6021      	streq	r1, [r4, #0]
 8000f84:	6054      	str	r4, [r2, #4]
 8000f86:	e7c7      	b.n	8000f18 <_free_r+0x28>
 8000f88:	b003      	add	sp, #12
 8000f8a:	bd30      	pop	{r4, r5, pc}
 8000f8c:	200028c0 	.word	0x200028c0

08000f90 <_malloc_r>:
 8000f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f92:	1ccd      	adds	r5, r1, #3
 8000f94:	f025 0503 	bic.w	r5, r5, #3
 8000f98:	3508      	adds	r5, #8
 8000f9a:	2d0c      	cmp	r5, #12
 8000f9c:	bf38      	it	cc
 8000f9e:	250c      	movcc	r5, #12
 8000fa0:	2d00      	cmp	r5, #0
 8000fa2:	4606      	mov	r6, r0
 8000fa4:	db01      	blt.n	8000faa <_malloc_r+0x1a>
 8000fa6:	42a9      	cmp	r1, r5
 8000fa8:	d903      	bls.n	8000fb2 <_malloc_r+0x22>
 8000faa:	230c      	movs	r3, #12
 8000fac:	6033      	str	r3, [r6, #0]
 8000fae:	2000      	movs	r0, #0
 8000fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fb2:	f000 f87d 	bl	80010b0 <__malloc_lock>
 8000fb6:	4921      	ldr	r1, [pc, #132]	; (800103c <_malloc_r+0xac>)
 8000fb8:	680a      	ldr	r2, [r1, #0]
 8000fba:	4614      	mov	r4, r2
 8000fbc:	b99c      	cbnz	r4, 8000fe6 <_malloc_r+0x56>
 8000fbe:	4f20      	ldr	r7, [pc, #128]	; (8001040 <_malloc_r+0xb0>)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	b923      	cbnz	r3, 8000fce <_malloc_r+0x3e>
 8000fc4:	4621      	mov	r1, r4
 8000fc6:	4630      	mov	r0, r6
 8000fc8:	f000 f862 	bl	8001090 <_sbrk_r>
 8000fcc:	6038      	str	r0, [r7, #0]
 8000fce:	4629      	mov	r1, r5
 8000fd0:	4630      	mov	r0, r6
 8000fd2:	f000 f85d 	bl	8001090 <_sbrk_r>
 8000fd6:	1c43      	adds	r3, r0, #1
 8000fd8:	d123      	bne.n	8001022 <_malloc_r+0x92>
 8000fda:	230c      	movs	r3, #12
 8000fdc:	6033      	str	r3, [r6, #0]
 8000fde:	4630      	mov	r0, r6
 8000fe0:	f000 f86c 	bl	80010bc <__malloc_unlock>
 8000fe4:	e7e3      	b.n	8000fae <_malloc_r+0x1e>
 8000fe6:	6823      	ldr	r3, [r4, #0]
 8000fe8:	1b5b      	subs	r3, r3, r5
 8000fea:	d417      	bmi.n	800101c <_malloc_r+0x8c>
 8000fec:	2b0b      	cmp	r3, #11
 8000fee:	d903      	bls.n	8000ff8 <_malloc_r+0x68>
 8000ff0:	6023      	str	r3, [r4, #0]
 8000ff2:	441c      	add	r4, r3
 8000ff4:	6025      	str	r5, [r4, #0]
 8000ff6:	e004      	b.n	8001002 <_malloc_r+0x72>
 8000ff8:	6863      	ldr	r3, [r4, #4]
 8000ffa:	42a2      	cmp	r2, r4
 8000ffc:	bf0c      	ite	eq
 8000ffe:	600b      	streq	r3, [r1, #0]
 8001000:	6053      	strne	r3, [r2, #4]
 8001002:	4630      	mov	r0, r6
 8001004:	f000 f85a 	bl	80010bc <__malloc_unlock>
 8001008:	f104 000b 	add.w	r0, r4, #11
 800100c:	1d23      	adds	r3, r4, #4
 800100e:	f020 0007 	bic.w	r0, r0, #7
 8001012:	1ac2      	subs	r2, r0, r3
 8001014:	d0cc      	beq.n	8000fb0 <_malloc_r+0x20>
 8001016:	1a1b      	subs	r3, r3, r0
 8001018:	50a3      	str	r3, [r4, r2]
 800101a:	e7c9      	b.n	8000fb0 <_malloc_r+0x20>
 800101c:	4622      	mov	r2, r4
 800101e:	6864      	ldr	r4, [r4, #4]
 8001020:	e7cc      	b.n	8000fbc <_malloc_r+0x2c>
 8001022:	1cc4      	adds	r4, r0, #3
 8001024:	f024 0403 	bic.w	r4, r4, #3
 8001028:	42a0      	cmp	r0, r4
 800102a:	d0e3      	beq.n	8000ff4 <_malloc_r+0x64>
 800102c:	1a21      	subs	r1, r4, r0
 800102e:	4630      	mov	r0, r6
 8001030:	f000 f82e 	bl	8001090 <_sbrk_r>
 8001034:	3001      	adds	r0, #1
 8001036:	d1dd      	bne.n	8000ff4 <_malloc_r+0x64>
 8001038:	e7cf      	b.n	8000fda <_malloc_r+0x4a>
 800103a:	bf00      	nop
 800103c:	200028c0 	.word	0x200028c0
 8001040:	200028c4 	.word	0x200028c4

08001044 <_realloc_r>:
 8001044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001046:	4607      	mov	r7, r0
 8001048:	4614      	mov	r4, r2
 800104a:	460e      	mov	r6, r1
 800104c:	b921      	cbnz	r1, 8001058 <_realloc_r+0x14>
 800104e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001052:	4611      	mov	r1, r2
 8001054:	f7ff bf9c 	b.w	8000f90 <_malloc_r>
 8001058:	b922      	cbnz	r2, 8001064 <_realloc_r+0x20>
 800105a:	f7ff ff49 	bl	8000ef0 <_free_r>
 800105e:	4625      	mov	r5, r4
 8001060:	4628      	mov	r0, r5
 8001062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001064:	f000 f830 	bl	80010c8 <_malloc_usable_size_r>
 8001068:	42a0      	cmp	r0, r4
 800106a:	d20f      	bcs.n	800108c <_realloc_r+0x48>
 800106c:	4621      	mov	r1, r4
 800106e:	4638      	mov	r0, r7
 8001070:	f7ff ff8e 	bl	8000f90 <_malloc_r>
 8001074:	4605      	mov	r5, r0
 8001076:	2800      	cmp	r0, #0
 8001078:	d0f2      	beq.n	8001060 <_realloc_r+0x1c>
 800107a:	4631      	mov	r1, r6
 800107c:	4622      	mov	r2, r4
 800107e:	f7ff ff0f 	bl	8000ea0 <memcpy>
 8001082:	4631      	mov	r1, r6
 8001084:	4638      	mov	r0, r7
 8001086:	f7ff ff33 	bl	8000ef0 <_free_r>
 800108a:	e7e9      	b.n	8001060 <_realloc_r+0x1c>
 800108c:	4635      	mov	r5, r6
 800108e:	e7e7      	b.n	8001060 <_realloc_r+0x1c>

08001090 <_sbrk_r>:
 8001090:	b538      	push	{r3, r4, r5, lr}
 8001092:	4d06      	ldr	r5, [pc, #24]	; (80010ac <_sbrk_r+0x1c>)
 8001094:	2300      	movs	r3, #0
 8001096:	4604      	mov	r4, r0
 8001098:	4608      	mov	r0, r1
 800109a:	602b      	str	r3, [r5, #0]
 800109c:	f000 f81e 	bl	80010dc <_sbrk>
 80010a0:	1c43      	adds	r3, r0, #1
 80010a2:	d102      	bne.n	80010aa <_sbrk_r+0x1a>
 80010a4:	682b      	ldr	r3, [r5, #0]
 80010a6:	b103      	cbz	r3, 80010aa <_sbrk_r+0x1a>
 80010a8:	6023      	str	r3, [r4, #0]
 80010aa:	bd38      	pop	{r3, r4, r5, pc}
 80010ac:	20002960 	.word	0x20002960

080010b0 <__malloc_lock>:
 80010b0:	4801      	ldr	r0, [pc, #4]	; (80010b8 <__malloc_lock+0x8>)
 80010b2:	f000 b811 	b.w	80010d8 <__retarget_lock_acquire_recursive>
 80010b6:	bf00      	nop
 80010b8:	20002968 	.word	0x20002968

080010bc <__malloc_unlock>:
 80010bc:	4801      	ldr	r0, [pc, #4]	; (80010c4 <__malloc_unlock+0x8>)
 80010be:	f000 b80c 	b.w	80010da <__retarget_lock_release_recursive>
 80010c2:	bf00      	nop
 80010c4:	20002968 	.word	0x20002968

080010c8 <_malloc_usable_size_r>:
 80010c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80010cc:	1f18      	subs	r0, r3, #4
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	bfbc      	itt	lt
 80010d2:	580b      	ldrlt	r3, [r1, r0]
 80010d4:	18c0      	addlt	r0, r0, r3
 80010d6:	4770      	bx	lr

080010d8 <__retarget_lock_acquire_recursive>:
 80010d8:	4770      	bx	lr

080010da <__retarget_lock_release_recursive>:
 80010da:	4770      	bx	lr

080010dc <_sbrk>:
 80010dc:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <_sbrk+0x14>)
 80010de:	6819      	ldr	r1, [r3, #0]
 80010e0:	4602      	mov	r2, r0
 80010e2:	b909      	cbnz	r1, 80010e8 <_sbrk+0xc>
 80010e4:	4903      	ldr	r1, [pc, #12]	; (80010f4 <_sbrk+0x18>)
 80010e6:	6019      	str	r1, [r3, #0]
 80010e8:	6818      	ldr	r0, [r3, #0]
 80010ea:	4402      	add	r2, r0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	4770      	bx	lr
 80010f0:	200028c8 	.word	0x200028c8
 80010f4:	20002970 	.word	0x20002970

080010f8 <_init>:
 80010f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010fa:	bf00      	nop
 80010fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010fe:	bc08      	pop	{r3}
 8001100:	469e      	mov	lr, r3
 8001102:	4770      	bx	lr

08001104 <_fini>:
 8001104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001106:	bf00      	nop
 8001108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800110a:	bc08      	pop	{r3}
 800110c:	469e      	mov	lr, r3
 800110e:	4770      	bx	lr
